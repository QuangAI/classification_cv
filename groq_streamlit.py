import io
import os
import re
import hashlib
import streamlit as st
from dotenv import load_dotenv

# PDFMiner
from pdfminer.converter import TextConverter
from pdfminer.layout import LAParams
from pdfminer.pdfdocument import PDFDocument
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.pdfpage import PDFPage
from pdfminer.pdfparser import PDFParser

# LLM
from langchain_groq import ChatGroq

st.set_page_config(page_title="Ph√¢n lo·∫°i CV", page_icon="üìÑ", layout="centered")

load_dotenv()
ENV_GROQ_KEY = os.getenv("GROQ_API_KEY", "")

with st.sidebar:
    st.header("Thi·∫øt l·∫≠p")
    groq_key_input = st.text_input(
        "GROQ_API_KEY",
        type="password",
        value=ENV_GROQ_KEY if ENV_GROQ_KEY else "",
        help="ƒê·∫∑t trong .env ho·∫∑c nh·∫≠p tr·ª±c ti·∫øp t·∫°i ƒë√¢y"
    )
    if groq_key_input:
        os.environ["GROQ_API_KEY"] = groq_key_input.strip()

st.title("üìÑ Ph√¢n lo·∫°i CV v√†o **lƒ©nh v·ª±c** ph√π h·ª£p nh·∫•t")
st.caption("Upload file PDF v√† h·ªá th·ªëng s·∫Ω tr·∫£ v·ªÅ ƒë√∫ng **3 lƒ©nh v·ª±c** theo ƒë·ªãnh d·∫°ng y√™u c·∫ßu.")
CLASSIFY_PROMPT = """
B·∫°n l√† m·ªôt nh√† tuy·ªÉn d·ª•ng chuy√™n nghi·ªáp, c√≥ nhi·ªám v·ª• ph√¢n t√≠ch v√† ph√¢n lo·∫°i h·ªì s∆° ·ª©ng vi√™n. 

H√£y ƒë·ªçc k·ªπ n·ªôi dung CV d∆∞·ªõi ƒë√¢y v√† **ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng 3 lƒ©nh v·ª±c ph√π h·ª£p nh·∫•t** t·ª´ danh s√°ch cho s·∫µn b√™n d∆∞·ªõi, d·ª±a tr√™n kinh nghi·ªám, k·ªπ nƒÉng v√† ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp c·ªßa ·ª©ng vi√™n.

**Y√™u c·∫ßu quan tr·ªçng:**
- Ch·ªâ li·ªát k√™ ƒë√∫ng 3 lƒ©nh v·ª±c ph√π h·ª£p nh·∫•t.
- Kh√¥ng c·∫ßn gi·∫£i th√≠ch hay m√¥ t·∫£ th√™m.
- Ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£ ƒë√∫ng theo ƒë·ªãnh d·∫°ng sau:

**K·∫øt qu·∫£:**
1. [T√™n lƒ©nh v·ª±c 1]
2. [T√™n lƒ©nh v·ª±c 2]
3. [T√™n lƒ©nh v·ª±c 3]

**Danh s√°ch lƒ©nh v·ª±c:**
1. C√¥ng ngh·ªá - Th√¥ng tin
2. ƒê·∫ßu t∆∞ - T√†i ch√≠nh
3. Y t·∫ø - D∆∞·ª£c ph·∫©m
4. Gi√°o d·ª•c
5. B·∫•t ƒë·ªông s·∫£n - X√¢y d·ª±ng
6. NƒÉng l∆∞·ª£ng - M√¥i tr∆∞·ªùng
7. Th·ª±c ph·∫©m - N√¥ng nghi·ªáp
8. D·ªãch v·ª• - Du l·ªãch
9. S·∫£n ph·∫©m - Ti√™u d√πng
10. Nh√† h√†ng - ƒÇn u·ªëng
11. V·∫≠n t·∫£i - Logistics
12. Th·ªÉ d·ª•c - Th·ªÉ thao

### ƒê√¢y l√† n·ªôi dung CV:
--HERERESUME--
""".strip()


# ========== H√ÄM X·ª¨ L√ù ==========
def load_pdf_text(uploaded_file) -> str:
    """
    Tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ PDF (Streamlit UploadedFile).
    """
    try:
        if uploaded_file is None:
            return ""

        # ƒê·∫£m b·∫£o ƒë√∫ng ƒë·ªãnh d·∫°ng PDF
        if not uploaded_file.name.lower().endswith(".pdf"):
            raise ValueError("Vui l√≤ng upload file PDF.")
        file_bytes = uploaded_file.getvalue()
        bio = io.BytesIO(file_bytes)

        resource_manager = PDFResourceManager()
        fake_file_handle = io.StringIO()
        converter = TextConverter(resource_manager, fake_file_handle, laparams=LAParams())
        interpreter = PDFPageInterpreter(resource_manager, converter)

        for page in PDFPage.get_pages(bio, caching=True, check_extractable=True):
            interpreter.process_page(page)

        text = fake_file_handle.getvalue()
        converter.close()
        fake_file_handle.close()
        bio.close()

        return text or ""
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ tr√≠ch xu·∫•t n·ªôi dung t·ª´ PDF: {e}")
        return ""


def remove_line_breaks(text: str) -> str:
    return re.sub(r"\r\n|\r|\n", " ", text)


def clean_text(text: str) -> str:
    text = re.sub(r"\s+", " ", text)
    return text.strip()


def get_upload_hash(uploaded_file) -> str:
    """
    T·∫°o hash d·ª±a tr√™n t√™n + k√≠ch th∆∞·ªõc + 512 bytes ƒë·∫ßu ƒë·ªÉ nh·∫≠n bi·∫øt file m·ªõi.
    """
    if not uploaded_file:
        return ""
    head = uploaded_file.getvalue()[:512]
    h = hashlib.sha256()
    h.update(uploaded_file.name.encode("utf-8"))
    h.update(str(uploaded_file.size).encode("utf-8"))
    h.update(head)
    return h.hexdigest()


def call_llm(resume_text: str) -> str:
    """
    G·ªçi Groq LLM qua langchain_groq, ch·ªâ tr·∫£ v·ªÅ content (string).
    """
    llm = ChatGroq(
        model="deepseek-r1-distill-llama-70b",
        temperature=0,
        max_tokens=None,
        reasoning_format="parsed",
        timeout=None,
        max_retries=2,
    )
    messages = [
        ("system", "B·∫°n l√† m·ªôt nh√† tuy·ªÉn d·ª•ng nhi·ªát t√¨nh v√† trung th·ª±c. H√£y lu√¥n tr·∫£ l·ªùi m·ªôt c√°ch h·ªØu √≠ch nh·∫•t c√≥ th·ªÉ."),
        ("human", CLASSIFY_PROMPT.replace("--HERERESUME--", resume_text)),
    ]
    ai_msg = llm.invoke(messages)
    return ai_msg.content if hasattr(ai_msg, "content") else str(ai_msg)


def parse_top3_fields(text: str):
    """
    R√∫t tr√≠ch 3 d√≤ng k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng mong mu·ªën.
    Ch·∫•p nh·∫≠n c√°c bi·∫øn th·ªÉ nh·ªè (c√≥/kh√¥ng c√≥ 'K·∫øt qu·∫£:'), v√† ƒë√°nh s·ªë 1./2./3.
    """
    # Th·ª≠ t√°ch theo block "K·∫øt qu·∫£:" n·∫øu c√≥
    block = text
    m = re.search(r"K·∫øt\s*qu·∫£\s*:?(.*)$", text, flags=re.IGNORECASE | re.DOTALL)
    if m:
        block = m.group(1)

    # L·∫•y 3 d√≤ng b·∫Øt ƒë·∫ßu b·∫±ng s·ªë th·ª© t·ª±
    lines = re.findall(r"^\s*\d+\.\s*(.+?)\s*$", block, flags=re.MULTILINE)
    lines = [l.strip(" -‚Ä¢\t") for l in lines if l.strip()]

    # N·∫øu kh√¥ng t√¨m th·∫•y theo m·∫´u ƒë√°nh s·ªë, c·ªë g·∫Øng t√°ch theo xu·ªëng d√≤ng
    if len(lines) < 3:
        fallback = [s.strip() for s in block.splitlines() if s.strip()]
        lines = [l for l in fallback if l][:3]

    # Ch·ªâ gi·ªØ 3 m·ª•c ƒë·∫ßu
    return lines[:3]


# ========== QU·∫¢N L√ù STATE ƒê·ªÇ X√ìA K·∫æT QU·∫¢ C≈® ==========
if "last_upload_hash" not in st.session_state:
    st.session_state.last_upload_hash = None
if "last_result" not in st.session_state:
    st.session_state.last_result = None

# ========== GIAO DI·ªÜN ==========
uploaded_file = st.file_uploader("T·∫£i l√™n CV (PDF)", type=["pdf"])

# T·∫°o hash cho file hi·ªán t·∫°i
current_hash = get_upload_hash(uploaded_file)
if current_hash != st.session_state.last_upload_hash:
    # File m·ªõi -> x√≥a k·∫øt qu·∫£ c≈©
    st.session_state.last_result = None
    st.session_state.last_upload_hash = current_hash

run_btn_col1, run_btn_col2 = st.columns([1, 1])
with run_btn_col1:
    run_now = st.button("Ph√¢n lo·∫°i ngay", type="primary", disabled=(uploaded_file is None))
with run_btn_col2:
    clear_now = st.button("X√≥a k·∫øt qu·∫£")

if clear_now:
    st.session_state.last_result = None

if run_now:
    if not os.getenv("GROQ_API_KEY"):
        st.error("Ch∆∞a c√≥ GROQ_API_KEY. H√£y ƒë·∫∑t trong .env ho·∫∑c nh·∫≠p ·ªü sidebar.")
    elif uploaded_file is None:
        st.error("Vui l√≤ng upload m·ªôt file PDF.")
    else:
        with st.spinner("ƒêang tr√≠ch xu·∫•t v√† ph√¢n lo·∫°i‚Ä¶"):
            raw_text = load_pdf_text(uploaded_file)
            formatted_text = remove_line_breaks(raw_text)
            cleaned_text = clean_text(formatted_text)

            if not cleaned_text:
                st.error("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung CV t·ª´ file PDF.")
            else:
                try:
                    response_text = call_llm(cleaned_text)
                    top3 = parse_top3_fields(response_text)

                    # N·∫øu parse kh√¥ng ƒë∆∞·ª£c, hi·ªÉn th·ªã nguy√™n vƒÉn
                    if len(top3) != 3:
                        st.warning("Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c ƒë√∫ng 3 m·ª•c, hi·ªÉn th·ªã nguy√™n vƒÉn ph·∫£n h·ªìi:")
                        st.code(response_text, language="markdown")
                    else:
                        st.session_state.last_result = top3
                except Exception as e:
                    st.error(f"L·ªói khi g·ªçi m√¥ h√¨nh: {e}")

st.markdown("---")
st.subheader("K·∫øt qu·∫£")
if st.session_state.last_result:
    # ƒê√∫ng ƒë·ªãnh d·∫°ng mong mu·ªën: ch·ªâ 3 d√≤ng
    st.markdown("**K·∫øt qu·∫£:**")
    st.markdown(f"1. {st.session_state.last_result[0]}")
    st.markdown(f"2. {st.session_state.last_result[1]}")
    st.markdown(f"3. {st.session_state.last_result[2]}")
else:
    st.info("Ch∆∞a c√≥ k·∫øt qu·∫£. H√£y upload file PDF v√† b·∫•m **Ph√¢n lo·∫°i ngay**.")
